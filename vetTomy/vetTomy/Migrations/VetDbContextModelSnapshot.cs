// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using vet_tomy_data.Sources.DataBase;

#nullable disable

namespace vet_tomy.Migrations
{
    [DbContext(typeof(VetDbContext))]
    partial class VetDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.AppointmentTable", b =>
                {
                    b.Property<int>("AppointmentNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentNumber"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("AppointmentNumber");

                    b.HasIndex("BranchId");

                    b.HasIndex("PetId");

                    b.ToTable("appointments", "Pet");
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.BranchTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("branchs", "Pet");
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.BrandTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("brands", "Store");
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.BreedTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("breeds", "Pet");
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.CategoryTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Categories", "Store");
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.CustomerTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("customers", "Security");
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.EmployeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Salary")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.ToTable("employees", "Security");
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.ImageTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductServiceId");

                    b.ToTable("images", "Store");
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.MedicalHistoryTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("medicalHistory", "Pet");
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.PersonTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BussinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("persons", "Security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "nose",
                            BussinessName = "Nose",
                            CellPhoneNumber = "999666331",
                            DocumentNumber = "45454545",
                            DocumentType = "dni",
                            LastName = "Madero",
                            Name = "Jose",
                            State = true
                        },
                        new
                        {
                            Id = 2,
                            Address = "nose",
                            BussinessName = "Nose",
                            CellPhoneNumber = "999666332",
                            DocumentNumber = "45454546",
                            DocumentType = "dni",
                            LastName = "Damian",
                            Name = "Arturo",
                            State = true
                        },
                        new
                        {
                            Id = 3,
                            Address = "nose",
                            BussinessName = "Nose",
                            CellPhoneNumber = "999666333",
                            DocumentNumber = "45454547",
                            DocumentType = "dni",
                            LastName = "Pereira",
                            Name = "Roberto",
                            State = true
                        });
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.PetTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<int>("BreedId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("HistoryNumber")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("CustomerId");

                    b.ToTable("pets", "Pet");
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.ProducServiceTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<int?>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("productServices", "Store");
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.ReviewTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("reviews", "Store");
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.RoleTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("roles", "Security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Administrador del sistema",
                            Name = "Administrador",
                            State = true
                        },
                        new
                        {
                            Id = 2,
                            Description = "Vendedor del sistema",
                            Name = "Vendedor",
                            State = true
                        },
                        new
                        {
                            Id = 3,
                            Description = "Cliente del sistema",
                            Name = "Cliente",
                            State = true
                        });
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.SaleDetailTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("ProductId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("SaleId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("saleDetails", "Store");
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.SaleTable", b =>
                {
                    b.Property<int>("SaleNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleNumber"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiptType")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("SaleNumber");

                    b.HasIndex("BranchId");

                    b.ToTable("sales", "Store");
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.UserTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Mail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("RolId");

                    b.ToTable("users", "Security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Mail = "admin@admin.com",
                            Password = "123456",
                            PersonId = 1,
                            RolId = 1,
                            Salt = "qweretrt21212",
                            State = true
                        },
                        new
                        {
                            Id = 2,
                            Mail = "user1@user.com",
                            Password = "123456",
                            PersonId = 2,
                            RolId = 2,
                            Salt = "qweretrt21213",
                            State = true
                        },
                        new
                        {
                            Id = 3,
                            Mail = "user2@user.com",
                            Password = "123456",
                            PersonId = 3,
                            RolId = 3,
                            Salt = "qweretrt21213",
                            State = true
                        });
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.AppointmentTable", b =>
                {
                    b.HasOne("vet_tomy_data.Sources.DataBase.Tables.BranchTable", null)
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vet_tomy_data.Sources.DataBase.Tables.PetTable", null)
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.CategoryTable", b =>
                {
                    b.HasOne("vet_tomy_data.Sources.DataBase.Tables.CategoryTable", null)
                        .WithMany()
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.ImageTable", b =>
                {
                    b.HasOne("vet_tomy_data.Sources.DataBase.Tables.ProducServiceTable", null)
                        .WithMany()
                        .HasForeignKey("ProductServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.MedicalHistoryTable", b =>
                {
                    b.HasOne("vet_tomy_data.Sources.DataBase.Tables.AppointmentTable", null)
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.PetTable", b =>
                {
                    b.HasOne("vet_tomy_data.Sources.DataBase.Tables.BreedTable", null)
                        .WithMany()
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vet_tomy_data.Sources.DataBase.Tables.CustomerTable", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.ProducServiceTable", b =>
                {
                    b.HasOne("vet_tomy_data.Sources.DataBase.Tables.BrandTable", null)
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vet_tomy_data.Sources.DataBase.Tables.CategoryTable", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.ReviewTable", b =>
                {
                    b.HasOne("vet_tomy_data.Sources.DataBase.Tables.CustomerTable", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.SaleDetailTable", b =>
                {
                    b.HasOne("vet_tomy_data.Sources.DataBase.Tables.ProducServiceTable", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vet_tomy_data.Sources.DataBase.Tables.SaleTable", null)
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.SaleTable", b =>
                {
                    b.HasOne("vet_tomy_data.Sources.DataBase.Tables.BranchTable", null)
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("vet_tomy_data.Sources.DataBase.Tables.UserTable", b =>
                {
                    b.HasOne("vet_tomy_data.Sources.DataBase.Tables.PersonTable", null)
                        .WithOne()
                        .HasForeignKey("vet_tomy_data.Sources.DataBase.Tables.UserTable", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vet_tomy_data.Sources.DataBase.Tables.RoleTable", null)
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
